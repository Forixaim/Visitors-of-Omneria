buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

apply plugin: 'org.spongepowered.mixin'

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }
        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }
        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}
mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"

    add sourceSets.main, "${mod_id}.optional.refmap.json"
    config "${mod_id}.mixins.optional.json"
}
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Iron's Maven - Release"
        url = "https://code.redspace.io/releases"
    }
    flatDir {
        dir 'libs'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    runtimeOnly fg.deobf("curse.maven:caelus-308989:4581481")
    runtimeOnly fg.deobf("curse.maven:playeranimator-658587:4587214")
    runtimeOnly fg.deobf("io.redspace.ironsspellbooks:irons_spellbooks:${irons_spells_version}")
    runtimeOnly fg.deobf("curse.maven:curios-309927:5266541")
    runtimeOnly fg.deobf("curse.maven:geckolib-388172:5188427")
    implementation fg.deobf("libs:ExCap:20.9.4.5")
    implementation fg.deobf("curse.maven:epic-fight-mod-405076:5922122")
    implementation fg.deobf("libs:BattleArtsAPI:20.9.4.6")
    implementation fg.deobf("libs:refm:0.2.1-1.20.1")
    runtimeOnly fg.deobf("libs:indestructible:20.9.2")
    compileOnly fg.deobf("libs:WoM:ref")
    runtimeOnly fg.deobf("libs:BattleArts:20.9.3.4")
    implementation fg.deobf("curse.maven:mekanism-268560:5395221")
    compileOnly fg.deobf("curse.maven:draconic-evolution-223565:5524457")
    compileOnly fg.deobf("curse.maven:brandons-core-231382:5422013")
    compileOnly fg.deobf("curse.maven:projecte-226410:4901949")

    //Runtime Dummy
    runtimeOnly fg.deobf("curse.maven:selene-499980:5546852")
    runtimeOnly fg.deobf("curse.maven:mmmmmmmmmmmm-225738:5319203")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

}
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
                             forge_version       : forge_version, forge_version_range: forge_version_range,
                             loader_version_range: loader_version_range,
                             mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
                             mod_authors         : mod_authors, mod_description: mod_description,]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}
tasks.named('jar', Jar).configure {
    manifest {
        attributes(["Specification-Title"     : mod_id,
                    "Specification-Vendor"    : mod_authors,
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : mod_authors,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }
    finalizedBy 'reobfJar'
}
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
